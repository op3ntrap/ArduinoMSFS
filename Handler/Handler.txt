from typing import Dict
import pyvjoy
from serial import Serial, SerialException


class MegaJoystickHandler:
    """
    JoystickHandler class for Arduino Mega through serial communication.
    """

    def __init__(self, vjoy_id: int, s_port: str, s_baud: int):
        self.joy_id: int = vjoy_id
        self.serial_port: str = s_port
        self.serial_baud: int = s_baud
        self.joystick = pyvjoy.VJoyDevice(self.joy_id)  # initialise the Joystick
        # Since the inputs are all pull_ups we need to reverse/flip
        # the bits. switch_dict uses key/value approach for the flips.
        self.switch_dict: Dict[int] = {48: 1, 49: 0}
        self.last_payload: bytes = b''  # Store modified previous switch state.

    @staticmethod
    def activate(self):
        with Serial(port=self.serial_port, baudrate=self.serial_baud) as arduino_serial:

            while True:
                # time.sleep(0.001)
                try:
                    arduino_serial.flushOutput()  # Flush the output
                    payload: bytes = bytes(arduino_serial.readline().rstrip())  # Prettify the data.
                    # Check for state change and verify the payload is normal
                    if (self.last_payload != payload) & (len(payload) == 80):
                        for _i in range(80):
                            vjoy_status_output: int = self.joystick.set_button(_i + 1, self.switch_dict[payload[_i]])
                            del vjoy_status_output
                        self.last_payload = payload  # Updating the state variable.

                except (SerialException, KeyError, NameError):  # Blanket exception Handler.
                    self.joystick.reset_buttons()  # Safely reset all the buttons.
                    continue  # Poll for a new serial.read.
